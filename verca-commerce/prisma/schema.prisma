// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPPLIER
  EMPLOYEE
}

enum BusinessSector {
  AGRICULTURE
  MANUFACTURING
  CONSTRUCTION
  TRANSPORTATION
  FINANCE
  EDUCATION
  HEALTH
  HOSPITALITY
  RETAIL
  TECHNOLOGY
  OTHER
}

model Customer {
  customerId     String          @id @default(cuid())
  email          String          @unique
  phoneNumber    String          @db.VarChar(15)
  password       String          @db.VarChar(255)
  firstName      String?         @db.VarChar(255)
  lastName       String          @db.VarChar(255)
  companyNumber  String?         @db.VarChar(255)
  role           Role            @default(USER)
  signedUp       DateTime        @default(now())
  businessSector BusinessSector?

  addressId String
  address   Address @relation(fields: [addressId], references: [addressId]) // not in the database model

  cart   Cart?
  orders Order[]
}

model Address {
  addressId    String @id @default(cuid())
  city         String @db.VarChar(100)
  country      String @db.VarChar(40)
  postcode     String @db.VarChar(10)
  state        String @db.VarChar(40)
  streetName   String @db.VarChar(100)
  streetNumber String @db.VarChar(30)

  customers  Customer[]
  siteConfig SiteConfig[]
}

model Cart {
  cartId     String           @id @default(cuid())
  customerId String           @unique
  customer   Customer         @relation(fields: [customerId], references: [customerId]) // not in the database model
  products   CartOnProducts[]
}

model Product {
  id          String                 @id @default(cuid())
  name        String                 @unique @db.VarChar(255)
  price       Int
  description String                 @db.Text
  stock       Int //amount in stock
  imagePath   String?                @db.VarChar(255)
  createdAt   DateTime               @default(now())
  categories  CategoriesOnProducts[]
  carts       CartOnProducts[]
  orders      OrderOnProducts[]
}

model Category {
  id        String                 @id @default(cuid())
  name      String                 @unique @db.VarChar(255)
  imagePath String?                @db.VarChar(255) // probably should be paths for multiple images
  products  CategoriesOnProducts[]
}

model Order {
  id           String   @id @default(cuid())
  customerId   String
  date         DateTime @default(now())
  deliveryDate DateTime @default(now())

  customer Customer           @relation(fields: [customerId], references: [customerId])
  products OrderOnProducts[]
  invoice  Invoice?
  route    RoutesOnProducts[]
}

model Invoice {
  id            String   @id @default(cuid())
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id])
  invoiceAmount Int //price in cents
  dateOfPayment DateTime @default(now())
}

model Route {
  id    String             @id @default(cuid())
  name  String             @db.VarChar(255)
  order RoutesOnProducts[]
}

//? Emplyee model
model Employees {
  id        String @id @default(cuid())
  email     String @unique
  password  String @db.VarChar(255)
  firstName String @db.VarChar(255)
  lastname  String @db.VarChar(255)
  role      Role   @default(EMPLOYEE)
}

//? model for the site configuration
model SiteConfig {
  id          String  @id @default(cuid())
  companyName String  @db.VarChar(255)
  logoPath    String  @db.VarChar(255)
  email       String  @unique
  phoneNumber String  @db.VarChar(15)
  addressId   String
  address     Address @relation(fields: [addressId], references: [addressId])
}

// realtion models
model CategoriesOnProducts {
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model CartOnProducts {
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [cartId])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@id([cartId, productId])
}

model OrderOnProducts {
  orderId       String
  order         Order   @relation(fields: [orderId], references: [id])
  productId     String
  product       Product @relation(fields: [productId], references: [id])
  productAmount Int

  @@id([orderId, productId])
}

model RoutesOnProducts {
  routeId String @id
  route   Route  @relation(fields: [routeId], references: [id])
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}
